{"version":3,"sources":["Receipe.js","App.js","reportWebVitals.js","index.js"],"names":["Receipe","props","Fragment","style","fontSize","width","title","calories","src","image","alt","App","useState","receipes","setReceipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","className","onSubmit","event","preventDefault","onChange","target","value","type","map","receipe","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAceA,G,MAZC,SAACC,GACb,OACI,cAAC,IAAMC,SAAP,UACI,gCACI,qBAAIC,MAAO,CAACC,SAAS,OAAQC,MAAM,SAAnC,qBAAsDJ,EAAMK,SAC5D,4CAAeL,EAAMM,YACrB,qBAAKC,IAAKP,EAAMQ,MAAOC,IAAI,sBCgE5BC,EApEH,WAEV,IAFe,EAMeC,mBAAS,GANxB,gCAQiBA,mBAAS,KAR1B,mBAQRC,EARQ,KAQEC,EARF,OAUaF,mBAAS,IAVtB,mBAURG,EAVQ,KAUAC,EAVA,OAYUJ,mBAAS,WAZnB,mBAYTK,EAZS,KAYFC,EAZE,KAyBfC,qBAAU,WACRC,MACC,CAACH,IAEF,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,mCAAD,OAAqCL,EAArC,mBA5Bf,WA4Be,oBA1Bd,mCA0Bc,sDADT,cACbM,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAInBC,QAAQC,IAAIF,GACZX,EAAYW,EAAKG,MALE,2CAAH,qDAmBlB,OACE,cAAC,IAAM1B,SAAP,UACE,sBAAK2B,UAAU,MAAf,UACE,uBAAMC,SAhCM,SAACC,GACjBA,EAAMC,iBACNd,EAASH,GACTW,QAAQC,IAAIV,IA6BmBY,UAAU,cAArC,UACE,uBAAOI,SAtCI,SAACF,GAClBf,EAAUe,EAAMG,OAAOC,OACvBT,QAAQC,IAAIZ,IAoCuBc,UAAU,aAAaO,KAAK,OAAOD,MAAOpB,IACvE,wBAAQc,UAAU,gBAAgBO,KAAK,SAAvC,uBAEF,qBAAKP,UAAU,UAAf,SACChB,EAASwB,KAAI,SAAAC,GAAO,OACnB,cAAC,EAAD,CAAShC,MAAOgC,EAAQC,OAAOC,MAC/BjC,SAAU+B,EAAQC,OAAOhC,SACzBE,MAAO6B,EAAQC,OAAO9B,mBCnDjBgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f806e562.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Receipe = (props) =>{\r\n    return(\r\n        <React.Fragment>\r\n            <div>\r\n                <h2 style={{fontSize:\"20px\", width:\"300px\"}}> Title: {props.title}</h2>\r\n                <p> Calories: {props.calories}</p>\r\n                <img src={props.image} alt=\"food-image\" />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Receipe;","import React, {useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport Receipe from \"./Receipe\";\n\nconst App = () =>{\n\n  const APP_ID = \"675a2905\";\n\n  const APP_KEY = \"2e6383788f850ab35e8fce24ab2ce423\";\n\n  const [counter, setCounter] = useState(0);\n\n  const [receipes, setReceipes] = useState([]);\n\n  const [search, setSearch] = useState(\"\");\n\n  const[query, setQuery] = useState(\"chicken\");\n\n  const foodSearch = (event) =>{\n    setSearch(event.target.value);\n    console.log(search);\n  }\n\n  const getSearch = (event) =>{\n    event.preventDefault();\n    setQuery(search);\n    console.log(query);\n  }\n\n  useEffect(() =>{\n    getRecipes();\n  }, [query]);\n  \n    const getRecipes = async () =>{\n    const response = await fetch( `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=3&calories=591-722&health=alcohol-free`);\n    const data = await response.json();\n\n    console.log(data);\n    setReceipes(data.hits);\n  }\n\n  // const getRecipes = () =>{\n  //   fetch(`https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}\n  //   &from=0&to=3&calories=591-722&health=alcohol-free`).then((response) =>{\n  //     return response.json()\n  //   }).then((actualdata) =>{\n  //     console.log(actualdata);\n  //   })\n  // }\n\n\n\n  return(\n    <React.Fragment>\n      <div className=\"App\">\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input onChange={foodSearch} className=\"search-bar\" type=\"text\" value={search}/>\n          <button className=\"search-button\" type=\"submit\">Search</button>\n        </form>\n        <div className=\"receipe\">\n        {receipes.map(receipe => (\n          <Receipe title={receipe.recipe.label}\n          calories={receipe.recipe.calories}\n          image={receipe.recipe.image}\n          /> \n        ))}\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}